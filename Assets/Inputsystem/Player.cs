//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputsystem/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""8d15f648-d495-43df-8064-8307b7592350"",
            ""actions"": [
                {
                    ""name"": ""Root"",
                    ""type"": ""Button"",
                    ""id"": ""d8ddbfbe-f502-4a5d-9180-97eaa5220eaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""fa62b335-5b60-40ba-8c08-6d173658a980"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""26e36fc7-02f7-46c8-934f-c7d0244a2b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""bdc0d34a-0d79-44e2-82a8-7305ecca693c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22f2d2b4-14c6-40dd-a24c-d8d25e0d9e78"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Root"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd4c803c-a9cb-490a-a76a-2e2775cd7b1e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d09830b7-7d25-463f-8e61-e073f14a5385"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db4e70fb-d8bf-4cbf-9d98-9e7c8d03f706"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30930914-e024-410d-86db-5dd16f00c3ae"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a398d0d-dd2a-4355-a541-e2ba9053bbf2"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Root = m_PlayerControls.FindAction("Root", throwIfNotFound: true);
        m_PlayerControls_Left = m_PlayerControls.FindAction("Left", throwIfNotFound: true);
        m_PlayerControls_Right = m_PlayerControls.FindAction("Right", throwIfNotFound: true);
        m_PlayerControls_Grow = m_PlayerControls.FindAction("Grow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_Root;
    private readonly InputAction m_PlayerControls_Left;
    private readonly InputAction m_PlayerControls_Right;
    private readonly InputAction m_PlayerControls_Grow;
    public struct PlayerControlsActions
    {
        private @Player m_Wrapper;
        public PlayerControlsActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Root => m_Wrapper.m_PlayerControls_Root;
        public InputAction @Left => m_Wrapper.m_PlayerControls_Left;
        public InputAction @Right => m_Wrapper.m_PlayerControls_Right;
        public InputAction @Grow => m_Wrapper.m_PlayerControls_Grow;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @Root.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRoot;
                @Root.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRoot;
                @Root.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRoot;
                @Left.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRight;
                @Grow.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnGrow;
                @Grow.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnGrow;
                @Grow.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnGrow;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Root.started += instance.OnRoot;
                @Root.performed += instance.OnRoot;
                @Root.canceled += instance.OnRoot;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Grow.started += instance.OnGrow;
                @Grow.performed += instance.OnGrow;
                @Grow.canceled += instance.OnGrow;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnRoot(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnGrow(InputAction.CallbackContext context);
    }
}
